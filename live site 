<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloud Secretary: The AI Business Concierge</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #000000; /* Jet Black */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            color: #ffffff; /* Platinum Silver/White */
            overflow: hidden;
        }

        /* Electric Gold Accent Color */
        .electric-gold {
            color: #FFD700; /* Bright Electric Gold */
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.8), 0 0 20px rgba(255, 215, 0, 0.4);
        }

        .trailer-container {
            width: 95%;
            max-width: 1024px;
            height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #333;
            border-radius: 12px;
            background: rgba(17, 17, 17, 0.6);
            backdrop-filter: blur(5px);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.05);
            position: relative;
        }

        .line-text {
            font-size: clamp(1.5rem, 5vw, 3rem);
            font-weight: 800;
            opacity: 0;
            transition: opacity 1s ease-in-out, transform 0.5s ease-out;
            text-align: center;
            line-height: 1.2;
            padding: 0 1rem;
        }

        .visible {
            opacity: 1;
            transform: translateY(0);
        }

        .hidden-above {
            transform: translateY(-20px);
        }

        .button-style {
            transition: all 0.2s ease-in-out;
            /* Gold Shadow */
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
        }

        .button-style:hover {
            box-shadow: 0 0 25px rgba(255, 215, 0, 0.8);
            transform: translateY(-2px);
        }

        .audio-player-controls {
            display: none; /* Hide the native audio controls */
        }

        #loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
            color: #FFD700; /* Gold loading color */
            font-size: 1.25rem;
        }

    </style>
</head>
<body>

<div class="p-6 md:p-10 w-full max-w-4xl">
    <h1 class="text-4xl md:text-5xl font-extrabold text-center mb-10 text-white tracking-tight">
        Cloud Secretary: Brand Narrative
    </h1>

    <div id="trailer-container" class="trailer-container">
        <div id="line-display" class="line-text hidden-above">
            <span class="text-white">The Systems Architecture for</span><br class="hidden sm:block"> 
            <span class="electric-gold">Your Next Decade of Growth.</span>
        </div>
        <div id="loading-indicator">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-current inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Generating Narration...
        </div>
    </div>

    <div class="mt-8 text-center">
        <button id="play-button"
            class="button-style bg-black text-electric-gold border-2 border-electric-gold font-bold py-3 px-8 rounded-full shadow-lg text-lg uppercase tracking-wider"
            onclick="initiateTrailer()">
            Play AI Brand Trailer
        </button>
        <audio id="audio-player" class="audio-player-controls"></audio>
    </div>

</div>

<div id="message-box" class="fixed bottom-4 right-4 bg-gray-900 text-white p-4 rounded-lg shadow-2xl transition-opacity duration-500 opacity-0 pointer-events-none"></div>


<script type="module">
    // --- Firebase Initialization (Required for Canvas Environment) ---
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    setLogLevel('Debug');
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    let auth, db;
    let isAuthReady = false;

    try {
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const app = initializeApp(firebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);
    } catch (e) {
        console.error("Firebase setup failed:", e);
    }

    // Attempt Firebase Authentication
    async function setupFirebase() {
        if (!auth) return;
        try {
            if (typeof __initial_auth_token !== 'undefined') {
                await signInWithCustomToken(auth, __initial_auth_token);
                console.log("Signed in with custom token.");
            } else {
                await signInAnonymously(auth);
                console.log("Signed in anonymously.");
            }
            isAuthReady = true;
        } catch (error) {
            console.error("Firebase Auth Error:", error);
            showMessage("Authentication failed. Trailer may not run.", 'error');
        }
    }

    // --- Utility Functions for TTS (PCM to WAV Conversion) ---

    // Convert Base64 string to ArrayBuffer
    function base64ToArrayBuffer(base64) {
        const binaryString = atob(base64);
        const len = binaryString.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return bytes.buffer;
    }

    // PCM (L16) audio to WAV file conversion
    function pcmToWav(pcm16, sampleRate = 24000) {
        const numChannels = 1;
        const bytesPerSample = 2; // 16-bit PCM

        const buffer = new ArrayBuffer(44 + pcm16.length * bytesPerSample);
        const view = new DataView(buffer);
        let offset = 0;

        // RIFF chunk
        writeString('RIFF');
        view.setUint32(offset, 36 + pcm16.length * bytesPerSample, true); offset += 4; // ChunkSize
        writeString('WAVE');

        // FMT chunk
        writeString('fmt ');
        view.setUint32(offset, 16, true); offset += 4; // Subchunk1Size (16 for PCM)
        view.setUint16(offset, 1, true); offset += 2; // AudioFormat (1 for PCM)
        view.setUint16(offset, numChannels, true); offset += 2; // NumChannels
        view.setUint32(offset, sampleRate, true); offset += 4; // SampleRate
        view.setUint32(offset, sampleRate * numChannels * bytesPerSample, true); offset += 4; // ByteRate
        view.setUint16(offset, numChannels * bytesPerSample, true); offset += 2; // BlockAlign
        view.setUint16(offset, bytesPerSample * 8, true); offset += 2; // BitsPerSample

        // DATA chunk
        writeString('data');
        view.setUint32(offset, pcm16.length * bytesPerSample, true); offset += 4; // Subchunk2Size

        // Write PCM data
        for (let i = 0; i < pcm16.length; i++, offset += 2) {
            view.setInt16(offset, pcm16[i], true);
        }

        return new Blob([view], { type: 'audio/wav' });

        function writeString(s) {
            for (let i = 0; i < s.length; i++) {
                view.setUint8(offset++, s.charCodeAt(i));
            }
        }
    }

    // --- Global State and Elements ---
    const playButton = document.getElementById('play-button');
    const lineDisplay = document.getElementById('line-display');
    const audioPlayer = document.getElementById('audio-player');
    const loadingIndicator = document.getElementById('loading-indicator');
    const apiKey = ""; // Canvas will provide this if empty

    const scriptLines = [
        { text: "We turn **hustle into systems** and ideas into income.", voicePrompt: "Say in a clear, strategic, and trustworthy tone: We turn hustle into systems and ideas into income.", duration: 3.5 },
        { text: "Cloud Secretary is your **AI Business Concierge**.", voicePrompt: "Say in a confident and minimal tone: Cloud Secretary is your AI Business Concierge.", duration: 3.0 },
        { text: "The full infrastructure: **Automation.** **Content Engine.** **Education.** **Design.**", voicePrompt: "Say with concise, sharp pacing: The full infrastructure: Automation. Content Engine. Education. Design.", duration: 4.5 },
        { text: "Built Different = **Built Automated.**", voicePrompt: "Say with emphasis: Built Different means Built Automated.", duration: 2.5 },
        { text: "**Systems Don't Sleep.**", voicePrompt: "Say with a powerful, echoing tone: Systems Don't Sleep.", duration: 2.0 },
        { text: "We automate success so you can **live yours**.", voicePrompt: "Say softly, but firmly: We automate success so you can live yours.", duration: 3.0 },
        { text: "<span class='electric-gold'>Cloud Secretary.</span>", voicePrompt: "Say in a final, powerful tone: Cloud Secretary.", duration: 1.0 }
    ];

    let audioBlobs = [];
    let isGenerating = false;

    // --- Message Box for non-alert feedback ---
    function showMessage(text, type = 'info') {
        const box = document.getElementById('message-box');
        box.textContent = text;
        // Updated color for consistency: using a deep gray with gold accent on the message box
        box.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-2xl transition-opacity duration-500 opacity-100 pointer-events-auto ${type === 'error' ? 'bg-red-700' : 'bg-gray-900 border border-yellow-500'}`;
        setTimeout(() => {
            box.classList.remove('opacity-100');
            box.classList.add('opacity-0');
        }, 3000);
    }

    // --- TTS API Call Logic ---
    async function generateTTSAudio(prompt, retries = 3, delay = 1000) {
        // NOTE: The URL must point to the environment where the Gemini TTS API is available and authorized.
        // In a typical web environment, you would use a secured proxy/backend service to make this call
        // to prevent exposing your API key. This URL is a placeholder/example.
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;

        const payload = {
            contents: [{ parts: [{ text: prompt }] }],
            generationConfig: {
                responseModalities: ["AUDIO"],
                speechConfig: {
                    voiceConfig: {
                        prebuiltVoiceConfig: { voiceName: "Kore" } // Kore is a Firm, Strategic voice
                    }
                }
            },
            model: "gemini-2.5-flash-preview-tts"
        };

        for (let i = 0; i < retries; i++) {
            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (response.ok) {
                    const result = await response.json();
                    const part = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = part?.inlineData?.data;
                    const mimeType = part?.inlineData?.mimeType;

                    if (audioData && mimeType && mimeType.startsWith("audio/L16")) {
                        // The mimeType for L16 (PCM) includes the sample rate (e.g., audio/L16;rate=24000)
                        const rateMatch = mimeType.match(/rate=(\d+)/);
                        const sampleRate = rateMatch ? parseInt(rateMatch[1], 10) : 24000;
                        
                        const pcmData = base64ToArrayBuffer(audioData);
                        const pcm16 = new Int16Array(pcmData);
                        const wavBlob = pcmToWav(pcm16, sampleRate);
                        return wavBlob;
                    } else {
                         throw new Error(`API response missing audio data or unexpected mime type: ${mimeType}`);
                    }
                } else {
                    const errorText = await response.text();
                    throw new Error(`API request failed with status ${response.status}: ${errorText}`);
                }
            } catch (error) {
                console.warn(`Attempt ${i + 1} failed: ${error.message}`);
                if (i < retries - 1) {
                    await new Promise(res => setTimeout(res, delay * Math.pow(2, i))); // Exponential Backoff
                } else {
                    throw error; // Re-throw if all retries fail
                }
            }
        }
        return null;
    }

    // --- Trailer Sequence Logic ---
    async function preloadAudio() {
        if (isGenerating) return;
        isGenerating = true;
        playButton.disabled = true;
        playButton.textContent = "Please wait...";
        loadingIndicator.style.display = 'block';
        
        audioBlobs = [];
        
        try {
            for (const line of scriptLines) {
                const blob = await generateTTSAudio(line.voicePrompt);
                audioBlobs.push(blob);
            }
            playButton.textContent = "Play AI Brand Trailer";
            playButton.disabled = false;
        } catch (error) {
            console.error("Failed to preload all audio:", error);
            showMessage("Error generating audio. Check console.", 'error');
            playButton.textContent = "Generation Failed (Retry)";
            playButton.disabled = false;
        } finally {
            loadingIndicator.style.display = 'none';
            isGenerating = false;
        }
    }

    function cleanupText(text) {
        // Find text between ** and wrap it in the electric-gold class
        return text.replace(/\*\*(.*?)\*\*/g, '<span class="electric-gold font-extrabold">$1</span>');
    }

    function updateLine(index) {
        const line = scriptLines[index];
        lineDisplay.innerHTML = cleanupText(line.text);
        
        // Apply classes for the animation
        lineDisplay.classList.remove('hidden-above', 'visible');
        // Force reflow
        void lineDisplay.offsetWidth; 
        lineDisplay.classList.add('visible');
    }

    async function playTrailerSequence() {
        playButton.disabled = true;
        playButton.textContent = "Trailer Running...";
        
        for (let i = 0; i < scriptLines.length; i++) {
            const line = scriptLines[i];
            const audioBlob = audioBlobs[i];

            if (!audioBlob) {
                console.error(`Missing audio for line ${i}. Skipping.`);
                await new Promise(resolve => setTimeout(resolve, line.duration * 1000));
                continue;
            }

            // 1. Update Visuals
            updateLine(i);

            // 2. Play Audio
            const audioUrl = URL.createObjectURL(audioBlob);
            audioPlayer.src = audioUrl;
            
            // Wait for audio to be ready, then play
            await new Promise(resolve => {
                audioPlayer.oncanplaythrough = () => {
                    audioPlayer.play().catch(e => console.error("Audio playback failed:", e));
                };
                audioPlayer.onended = resolve; // Resolve when audio finishes
                
                // Fallback timeout in case audio events fail
                setTimeout(resolve, (line.duration * 1000) + 500); 
            });

            // Clean up the URL object after playing
            URL.revokeObjectURL(audioUrl);

            // 3. Pause between lines (briefly for effect)
            if (i < scriptLines.length - 1) {
                 await new Promise(resolve => setTimeout(resolve, 500)); 
            }
        }

        // Sequence End
        lineDisplay.classList.remove('visible');
        lineDisplay.classList.add('hidden-above');
        
        playButton.textContent = "Replay Trailer";
        playButton.disabled = false;
    }


    window.initiateTrailer = async function() {
        if (audioBlobs.length === 0 || isGenerating) {
            if (!isGenerating) {
                showMessage("First time run: Generating narration. Please wait.", 'info');
                await preloadAudio();
            }
            if (audioBlobs.length > 0) {
                 playTrailerSequence();
            }
        } else {
            playTrailerSequence();
        }
    }

    // --- Initial Setup ---
    window.onload = async function() {
        await setupFirebase();
        // Start preloading the audio immediately on load if auth is ready
        if (isAuthReady) {
            preloadAudio();
        } else {
            // Fallback for environments where auth is complex
            playButton.textContent = "Start: Generate Narration";
            showMessage("Ready to begin. Click 'Start' to generate audio.", 'info');
        }
    };
</script>
</body>
</html>
